import java.util.Scanner;


abstract class Endowment {
    protected String endowmentId;
    protected String holderName;
    protected String endowmentType;
    protected String registrationDate;

    public Endowment(String endowmentId, String holderName, String endowmentType, String registrationDate){
        this.endowmentId = endowmentId;
        this.holderName = holderName;
        this.endowmentType = endowmentType;
        this.registrationDate = registrationDate;
    }

    public String getEndowmentId() {
        return endowmentId;
    }

    public String getHolderName() {
        return holderName;
    }

    public String getEndowmentType() {
        return endowmentType;
    }

    public String getRegistrationDate() {
        return registrationDate;
    }

    public void setEndowmentId(String endowmentId) {
        this.endowmentId = endowmentId;
    }

    public void setHolderName(String holderName) {
        this.holderName = holderName;
    }

    public void setEndowmentType(String endowmentType) {
        this.endowmentType = endowmentType;
    }

    public void setRegistrationDate(String registrationDate) {
        this.registrationDate = registrationDate;
    }

    public abstract double calculateEndowment();
}

class EducationalEndowment extends Endowment {
    private String educationalInstitution;
    private String educationalDivision;

    public EducationalEndowment(String endowmentId, String holderName, String endowmentType, String registrationDate, String educationalInstitution,String educationalDivision) {
        super(endowmentId, holderName, endowmentType, registrationDate);
        this.educationalInstitution = educationalInstitution;
        this.educationalDivision = educationalDivision;
    }

    public String getEducationalInstitution() {
        return educationalInstitution;
    }

    public String getEducationalDivision() {
        return educationalDivision;
    }

    public void setEducationalInstitution(String educationalInstitution) {
        this.educationalInstitution = educationalInstitution;
    }

    public void setEducationalDivision(String educationalDivision) {
        this.educationalDivision = educationalDivision;
    }

    public double calculateEndowment(){
        switch (educationalDivision.toLowerCase()) {
            case "school":
                return 30000;
            case "undergraduate":
                return 60000;
            case "postgraduate":
                return 90000;
            default:
                return 0;
        }
    }
}
class HealthEndowment extends Endowment {

    private String healthCareCenter;
    private int holderAge;

    public HealthEndowment(String endowmentId, String holderName, String endowmentType, String registrationDate, String healthCareCenter, int holderAge) {
        super(endowmentId, holderName, endowmentType, registrationDate);
        this.healthCareCenter = healthCareCenter;
        this.holderAge = holderAge;
    }

    public String getHealthCareCenter() {
        return healthCareCenter;
    }

    public int getHolderAge() {
        return holderAge;
    }

    public void setHealthCareCenter(String healthCareCenter) {
        this.healthCareCenter = healthCareCenter;
    }

    public void setHolderAge(int holderAge) {
        this.holderAge = holderAge;
    }

    @Override
    public double calculateEndowment() {
        if (holderAge > 0 && holderAge <= 30) {
            return 120000;
        } else if (holderAge < 60) {
            return 200000;
        } else {
            return 500000;
        }
    }
}


public class UserInterface extends Exception {
    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);

        System.out.print("Enter Endowment Id: ");
        String endowmentId = input.nextLine();

        System.out.print("Enter Holder Name: ");
        String holderName = input.nextLine();

        System.out.print("Enter Endowment Type: ");
        String endowmentType = input.nextLine();

        switch (endowmentType.toLowerCase()) {
            case "educational":
                System.out.print("Enter Registration Date: ");
                String registrationDate = input.nextLine();

                System.out.print("Enter Educational Institute: ");
                String educationalInstitution = input.nextLine();

                System.out.print("Enter Educational Division: ");
                String educationalDivision = input.nextLine();

                EducationalEndowment ee = new EducationalEndowment(endowmentId,holderName,endowmentType,registrationDate,educationalInstitution,educationalDivision);

                if (ee.calculateEndowment() == 0) {
                    System.out.println("Invalid educational division entered.");
                } else {
                    System.out.printf("Endowment Amount %.2f\n", ee.calculateEndowment());
                }
                break;


            case "health":
                System.out.print("Enter Registration Date: ");
                String registrationDate1 = input.nextLine();

                System.out.print("Enter Health Care Center: ");
                String healthCareCenter = input.nextLine();

                int holderAge;

                try {
                    System.out.print("Enter Holder Age: ");
                    holderAge = input.nextInt();
                    if (holderAge < 0){
                        throw new Exception("Age should be positive");
                    }
                } catch (InputMismatchException e) {
                    System.out.println("Invalid age entered. Please enter a valid integer.");
                    input.close();
                    return;
                } catch (Exception e) {
                    throw new RuntimeException(e);
                }

                HealthEndowment he = new HealthEndowment(endowmentId,holderName,endowmentType,registrationDate1,healthCareCenter,holderAge);

                System.out.println("Endowment Amount %.2f\n" + he.calculateEndowment());

                break;

            default:
                System.out.println(endowmentType + " is not an invalid endowment type");
        }
        input.close();
    }
}